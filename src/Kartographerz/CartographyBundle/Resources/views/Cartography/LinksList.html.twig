<div class="modal fade" id="LinksListModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="myModalLabel">{{'element_to_carto.add'|trans}}</h4>
            </div>
            <div class="modal-body">
                <table id="linkList" class="table table-striped table-bordered" cellspacing="0" width="100%">
                    <thead>
                        <tr>
                            <th>{{'link.tableview.id'|trans}}</th>
                            <th>{{'link.tableview.ele1'|trans}}</th>
                            <th>{{'link.tableview.ele2'|trans}}</th>
                            <th>{{'link.tableview.delete'|trans}}</th>
                        </tr>
                    </thead>
                </table>

                <table id="newLinks" class="table table-striped table-bordered" cellspacing="0" width="100%">
                    <thead>
                        <tr>
                            <th>{{'link.tableviewnew.ele1'|trans}}</th>
                            <th>{{'link.tableviewnew.ele2'|trans}}</th>
                            <th>{{'link.tableviewnew.delete'|trans}}</th>
                        </tr>
                    </thead>

                    <tfoot>
                        <tr>
                            <td><button type="button" class="btn btn-default" id="addRow"><i class="fa fa-plus"></i></button></td>
                            <th></th>
                            <th></th>

                        </tr>
                    </tfoot>
                </table>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">{{'elements_to_carto.close'|trans}}</button>
                <button type="button" class="btn btn-default" id="lastbutton">{{'elements_to_carto.previous'|trans}}</button>
                <button type="button" class="btn btn-primary" id="savesLinksButton">{{'elements_to_carto.save'|trans}}</button>
            </div>
        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div><!-- /.modal -->

<script>
    $(function () {
        var lastVersion = "{{lastVersion}}";
        var idCarto = "{{id}}";
       // console.log(idCarto)
        var t = $('#linkList').DataTable({
            "sAjaxSource": "{{ path("kartographerz_version_versionLinkList", {'versionCartography': lastVersion }) }}",
            "aoColumns": [
                {"mData": "id"},
                {"mData": function (val) {
                        return "<div data-id=" + val.element_1_id + ">" + val.element_1_label + "</div>"
                    }
                },
                {"mData": function (val) {
                        return "<div data-id=" + val.element_2_id + ">" + val.element_2_label + "</div>";
                    }
                },
                {"mData": function (row) {
                        return '<button id="delete_' + row.id + '" type="button" class="btn btn-danger delete"><i class="fa fa-trash delete"></i></button>';

                    }
                },
            ],
        });

        $("#linkList").on("click", ".delete", function () {
            t.row($(this).parents('tr')).remove().draw();
        });


        $("#newLinks").on("click", ".delete", function () {
            ta.row($(this).parents('tr')).remove().draw();
        });

        var ta = $('#newLinks').DataTable();
        var counter = 1;

        $('#addRow').on('click', function () {
            ta.row.add([
                "<select id=" + "mySelect1_" + counter + "></select>",
                "<select id=" + "mySelect2_" + counter + "></select>",
                '<button id="delete_link_' + counter + '" type="button" class="btn btn-danger delete"><i class="fa fa-trash delete"></i></button>'
            ]).draw();
            //console.log(getCurrentElements());
            var currentElements = getCurrentElements();

            createSelect(currentElements, "mySelect1_" + counter);
            createSelect(currentElements, "mySelect2_" + counter);
            counter++;
        });

        $("#lastbutton").click(function () {
            $("#LinksListModal").modal('toggle');
            $("#addElementToACartographyBox").modal('show');
        });
        $("#savesLinksButton").click(function () {
            var elements = $("#elementList tbody tr");
            var checkedCheckboxes = getAllCheckedCheckboxes();
            var elementsId = getCheckboxesId(checkedCheckboxes);
            $.post(
                    "{{ path("kartographerz_cartography_updateLinksElements") }}",
                    {"elements": elementsId, "cart": idCarto, "links": getLinks()},
            function (ret) {
                $("#LinksListModal").modal('toggle');
                location.reload();
            });
        });



        /**
         * From all checked checkboxes, get the list of their element
         * @returns {Array}
         */
        function getCurrentElements() {
            var currentElements = [];

            var checkedCheckboxes = getAllCheckedCheckboxes();

            $(checkedCheckboxes).each(function () {
                var element = {};
                element["key"] = $(this).attr('id');
                element["value"] = $(this).attr('data-label');

                currentElements.push(element);
            });

            return currentElements;
        }

        /**
         * 
         * @param {type} selectValues
         * @param {type} selector
         * @returns {undefined}
         */
        function createSelect(selectValues, selector) {
            //console.log(selectValues)
            $.each(selectValues, function () {
                var key = this["key"];
                var value = this["value"];
                //console.log(value)

                $('#' + selector).append($('<option>', {value: key}).text(value));
            });
        }

        /**
         * Return the array of all links in the LinksList datatable
         * @returns {getCurrentLinks.currentLinks|Array}
         */
        function getCurrentLinks() {
            var currentLinks = new Array();
            var rows = t.$("tr"); //Get all rows 

            $(rows).each(function () {

                var ele1 = this.cells[1];
                var ele2 = this.cells[2];

                var ele1_id = $(ele1).find('div').attr('data-id');
                var ele2_id = $(ele2).find('div').attr('data-id');

                var link = new Array();
                link.push(ele1_id, ele2_id);

                currentLinks.push(link);
            });

            return currentLinks;

        }

        /**
         * Return the array of the new links added in the newLinks datatable
         * @returns {Array}
         */
        function getNewLinks() {
            var newLinks = new Array();
            var rows = ta.$("tr"); //Get all rows 

            $(rows).each(function () {

                var ele1 = this.cells[0];
                var ele2 = this.cells[1];

                var select1_id = $(ele1).find('select').attr('id');
                var select2_id = $(ele2).find('select').attr('id');

                var link = new Array();

                link.push(getSelected(select1_id), getSelected(select2_id));

                newLinks.push(link);
            });


            return newLinks;
        }


        /**
         * 
         * @param {type} selectId
         * @returns {jQuery}
         */
        function getSelected(selectId) {

            var selectedElementId = $('#' + selectId).find(":selected").val();

            return selectedElementId;
        }

        /**
         * 
         Return the merge of current links and the newly added ones
         * @returns {Array} */
        function getLinks() {
            var first = getCurrentLinks();
            var second = getNewLinks();
            var linksList = $.merge($.merge([], first), second);
            return linksList;
        }

        /**
         * Return the array of links for the selected elements of the current version of cartography
         * @returns {Array}
         */
        function getProperLinks() {
            var currentElements = getCurrentElements();
            var currentLinks = getCurrentLinks();
            var properLinks = [];

            currentLinks.each(function (k, v) {
                var currentLink = v;
                currentElements.each(function (k, v) {
                    var currentElement = v;
                    if ($.inArray(currentElement, currentLink) !== -1) {
                        properLinks.push(currentLink);
                    }
                });
            });
            return properLinks;

        }
    });



</script>