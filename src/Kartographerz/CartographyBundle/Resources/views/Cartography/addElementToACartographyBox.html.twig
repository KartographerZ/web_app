{# empty Twig template #}


<!-- Modal -->

<div class="modal fade" id="addElementToACartographyBox" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="myModalLabel">{{'element_to_carto.add'|trans}}</h4>
            </div>
            <div class="modal-body">
                <div id="path">
                    {{ render(controller('KartographerzCartographyBundle:Element:getWebPath')) }}
                </div>
                <table id="elementList" class="display" cellspacing="0" width="100%">
                    <thead>
                        <tr>
                            <th>id</th>
                            <th>{{'element_to_carto.name'|trans}}</th>
                            <th>{{'element_to_carto.type'|trans}}</th>
                            <th>{{'element_to_carto.choice'|trans}}</th>
                        </tr>
                    </thead>
                </table>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">{{'submit.close'|trans}}</button>
                <button type="button" class="btn btn-primary" id="addElementToACartography"  >{{'submit.manageLink'|trans}}</button>
                <button type="button" class="btn btn-primary"  data-dismiss="modal" id="saveElements" >{{'submit.save'|trans}}</button>
            </div>
        </div>
    </div>
</div>


<script>
    $(function () {
        var webPath = $("#path").html();
        var liensCarto = [];
        var idCarto = "{{id}}";
        var lastVersion = "{{ lastVersion }}";
        var elementsCarto = [];

// _________________________________________Partie Arbor JS ________________________________________________________

        var sys = arbor.ParticleSystem(1000, 400, 1);
        sys.parameters({gravity: true});
        sys.renderer = Renderer("#viewport");
// __________________________________________________________________________________________________________________



// récupération des éléments de la cartographie courante ________________________________________________________________________________________

        $.ajax({
            type: "POST",
            url: "{{ path("kartographerz_element_versionElementList")}}",
            dataType: 'json',
            cache: false,
            success: function (data) {
                var dataTab = data.data;
                for (var i in dataTab) {
                    var idCartoTable = dataTab[i].version_id;
                    var id = dataTab[i].element_id;
                    var path = dataTab[i].typeElementImagePath;
                    path = webPath + "/" + path;

                    var line = [id, path];
                    if (idCartoTable === lastVersion) {
                        elementsCarto.push(line);
                    }
                }
                updateArborJs(elementsCarto, sys);
                updateElementsDatatables();
            }
        });

        $.ajax({
            type: "POST",
            url: "{{ path("kartographerz_version_versionLinkList", {'versionCartography': lastVersion }) }}",
            dataType: 'json',
            cache: false,
            success: function (data) {
                var dataTab = data.data;
                for (var i in dataTab) {
                    var e1 = dataTab[i].element_1_id;
                    var e2 = dataTab[i].element_2_id;
                    var linkCarto = [e1, e2];
                    liensCarto.push(linkCarto);
                }
                updateArborJsLink(liensCarto, sys, elementsCarto, webPath);
            }
        });
// _________________________________________________________________________________________________________________________________________________

        function updateElementsDatatables() {
            $('#elementList').DataTable({
                "sAjaxSource": "{{ path("kartographerz_element_elementList") }}",
                "aoColumns": [
                    {"mData": "id"},
                    {"mData": "name"},
                    {"mData": "typeelementlabel"},
                    {"mData": function (row) {
                            return " <input id=" + row.id + " data-label='" + row.name + "' type='checkbox'>";
                        }
                    }
                ],
                "createdRow": function (row, data) {
                    for (var i = 0; i < elementsCarto.length; i++) {
                        if (data['id'] === elementsCarto[i][0]) {
                            $('td', row).eq(3).find('input').prop("checked", true);
                        }
                    }
                }
            });
        }

        $("#addElementToACartography").click(function () {
            if (getAllCheckedCheckboxes().length <= 1)
            {
                alert("Il faut ajouter au moins 2 elements pour pouvoir gérer les liens");
            }
            else
            {
                var checkedCheckboxes = getAllCheckedCheckboxes();
                var elementsId = getCheckboxesId(checkedCheckboxes);
                $.post(
                        "{{ path("kartographerz_cartography_updateElements") }}",
                        {"elements": elementsId, "cart": idCarto, "lastVersion": lastVersion},
                function (ret) {

                });
                $("#addElementToACartographyBox").modal('toggle');
                $('#LinksListModal').modal('show');
            }
        });
        $("#saveElements").click(function () {
            var checkedCheckboxes = getAllCheckedCheckboxes();
            var elementsId = getCheckboxesId(checkedCheckboxes);
            $.post(
                    "{{ path("kartographerz_cartography_updateElements") }}",
                    {"elements": elementsId, "cart": idCarto},
            function (ret) {
                location.reload();
            });
            $("#addElementToACartographyBox").modal('toggle');
        });
    });
    /**
     * 
     
     * @returns {Array|getAllCheckedCheckboxes.checkedCheckboxes} */
    function getAllCheckedCheckboxes() {
        var checkboxes = $("#elementList input[type=checkbox]");
        var checkedCheckboxes = new Array();
        $(checkboxes).each(function () {

            var checkbox = $(this);
            if (isChecked(checkbox)) {
                checkedCheckboxes.push(checkbox);
            }
        });
        return checkedCheckboxes;
    }

    /**
     * 
     
     * @param {type} checkboxes
     * @returns {getCheckboxesId.ids|Array}     */
    function getCheckboxesId(checkboxes) {
        var ids = new Array();
        $(checkboxes).each(function () {
            ids.push($(this).attr('id'));
        });
        return ids;
    }

    /**
     * 
     
     * @param {type} theCheckbox
     * @returns {jQuery} */
    function isChecked(theCheckbox) {
        return $(theCheckbox).prop('checked');
    }

// _________________________________________Partie Arbor JS ________________________________________________________


    function updateArborJs(tab, sys) {
        jQuery.each(tab, function (index, value) {
            value = sys.addNode(value[0], {'color': 'red', 'shape': 'dot', 'label': value[1]});
        });
    }

    function updateArborJsLink(tab, sys, elementsCarto, webPath) {

        jQuery.each(tab, function (index, value) {
            var e1path;
            var e2path;
            for (var i in elementsCarto) {
                if (elementsCarto[i][0] === value[0]) {
                    e1path = elementsCarto[i][0];
                    e1path = webPath + "/" + e1path;
                }
                if (elementsCarto[i][0] === value[1]) {
                    e2path = elementsCarto[i][0];
                    e2path = webPath + "/" + e2path;
                }
            }
            var e1 = sys.addNode(value[0], {'color': 'green', 'shape': 'dot', 'label': e1path});
            var e2 = sys.addNode(value[1], {'color': 'blue', 'shape': 'dot', 'label': e2path});
            sys.addEdge(e1, e2);
        });
    }



// _________________________________________________________________________________________________________

</script>